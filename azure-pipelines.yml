# Schema reference:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema

# name: $(Rev:r)_$(SourceBranchName)_$(Build.SourceVersion)_$(Build.SourceVersionMessage)

variables:
  buildDockerfile: './Dockerfile'
  isMasterBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  publishArtifactName: 'mantasflowers-backend'
  __Githash: $(Build.SourceVersion)

pool:
  vmImage: ubuntu-18.04

# Run on every push
# trigger:

# Run on every pull request
# pr:

stages:
  - stage: CI
    displayName: CI
    jobs:
    - job: BuildJob
      displayName: Build solution
      steps:
      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: build
          arguments: --configuration Release
    - job: TestJob
      displayName: Test solution
      steps:
        - task: DotNetCoreCLI@2
          displayName: dotnet test
          inputs:
            command: test
            arguments: --configuration Release
      dependsOn: BuildJob
  - stage: PUBLISH
    displayName: PUBLISH
    dependsOn: CI
    condition: and(succeeded(), eq(variables.isMasterBranch, true))
    jobs:
      - job: PublishJob
        displayName: Publish solution
        steps:
          - task: replacetokens@3
            displayName: replace tokens plugin
            inputs:
              targetFiles: '**/appsettings.json'
              encoding: 'utf-8'
              writeBOM: true
              verbosity: 'detailed'
              escapeType: 'json'
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: false
          - task: DotNetCoreCLI@2
            displayName: dotnet publish
            inputs:
              command: publish
              publishWebProjects: True
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
          - task: PublishBuildArtifacts@1
            displayName: azure artifacts publish
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
              artifactName: $(publishArtifactName)

  # - stage: Build
  #   displayName: Build stage
  #   jobs:
  #   - job: BuildDockerImageJob
  #     steps:
  #     - task: Docker@2
  #       displayName: Build project as Docker image
  #       inputs:
  #         command: 'build'
  #         Dockerfile: $(buildDockerfile)